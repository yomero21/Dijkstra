import math
import networkx as nx
import matplotlib.pyplot as plt
class Vertice:
	def __init__(self, i):
		self.id = i
		self.vecinos = []
		self.visitado = False
		self.padre = None
		self.costo = float('inf')     
	def agregarVecino(self, v, p):
		if v not in self.vecinos:
			self.vecinos.append([v, p])

class Grafica:
	def __init__(self):
		self.vertices = {}
		self.g = nx.Graph()
	def agregarVertice(self, id):
		if id not in self.vertices:
			self.vertices[id] = Vertice(id)
			self.g.add_node(id)

	def agregarArista(self, a, b, p):
		if a in self.vertices and b in self.vertices:
			self.vertices[a].agregarVecino(b, p)
			self.vertices[b].agregarVecino(a, p)
			self.g.add_edges_from([(a,b)], weight=p)
			
	def imprimirGrafica(self):
		
		for v in self.vertices:
			print("El costo del vértice "+str(self.vertices[v].id)+" es "+ str(self.vertices[v].costo)+" llegando desde "+str(self.vertices[v].padre))
			#red_edges=red_edges+[(self.vertices[v].padre,self.vertices[v].id)]
		red_edges=[(1,3),(3,6)]
		edge_colors = ['black' if not edge in red_edges else 'red' for edge in self.g.edges()]
		black_edges = [edge for edge in self.g.edges() if edge not in red_edges]

		pos=nx.spring_layout(self.g)
		nx.draw_networkx_nodes(self.g, pos, cmap=plt.get_cmap('jet'), node_size = 500)
		nx.draw_networkx_labels(self.g, pos)
		nx.draw_networkx_edges(self.g, pos, edgelist=red_edges, edge_color='r', arrows=True)
		nx.draw_networkx_edges(self.g, pos, edgelist=black_edges, arrows=False)
		plt.show()
	
	def camino(self, a, b):
		camino = []
		actual = b
		redList=[]
		while actual != None:
			camino.insert(0, actual)
			actual = self.vertices[actual].padre
		for i in range(0,len(camino)):
			if (i == 0):
				redList.append([0])
				for j in range(1):
					redList[i].append(camino[i])
			else:
				redList.append([camino[i-1]])
				for j in range(1):
					redList[i].append(camino[i])
		return [redList]
	def costo(self,a,b):
		return self.vertices[b].costo
	def minimo(self, l):
		if len(l) > 0:
			m = self.vertices[l[0]].costo
			v = l[0]
			for e in l:
				if m > self.vertices[e].costo:
					m = self.vertices[e].costo
					v = e
			return v
		return None

	def dijkstra(self, a):
		if a in self.vertices:
			self.vertices[a].costo = 0
			actual = a
			noVisitados = []
			for v in self.vertices:
				if v != a:
					self.vertices[v].costo = float('inf')
				self.vertices[v].padre = None
				noVisitados.append(v)

			while len(noVisitados) > 0:
				for vec in self.vertices[actual].vecinos:
					if self.vertices[vec[0]].visitado == False:
						if self.vertices[actual].costo + vec[1] < self.vertices[vec[0]].costo:
							self.vertices[vec[0]].costo = self.vertices[actual].costo + vec[1]
							self.vertices[vec[0]].padre = actual

				self.vertices[actual].visitado = True
				noVisitados.remove(actual)

				actual = self.minimo(noVisitados)
		else:
			return False
			
class main:
	graf = Grafica()
	graf.agregarVertice(1)
	graf.agregarVertice(2)
	graf.agregarVertice(3)
	graf.agregarVertice(4)
	graf.agregarVertice(5)
	graf.agregarVertice(6)
	graf.agregarArista(1, 6, 14)
	graf.agregarArista(1, 2, 7)
	graf.agregarArista(1, 3, 9)
	graf.agregarArista(2, 3, 10)
	graf.agregarArista(2, 4, 15)
	graf.agregarArista(3, 4, 11)
	graf.agregarArista(3, 6, 2)
	graf.agregarArista(4, 5, 6)
	graf.agregarArista(5, 6, 9)


	graf.dijkstra(1)
	print("Camino más corto del vértice 1 al 6 :")
	print(graf.camino(1, 6))
	print(graf.costo(1,6))
	graf.imprimirGrafica()

